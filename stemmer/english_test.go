package stemmer

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestEnglishStemmer_normalizeApostrophes(t *testing.T) {
	s := NewEnglishStemmer()

	f := func(input, expected string) {
		actual := s.normalizeApostrophes(input)
		require.Equal(t, expected, actual)
	}

	f("example", "example")

	f("'example", "example")
	f("‘example", "example")
	f("’example", "example")
	f("‛example", "example")

	f("example's", "example's")
	f("example‘s", "example's")
	f("example’s", "example's")
	f("example‛s", "example's")
	f("'example's", "example's")
	f("‘example‘s", "example's")
	f("’example’s", "example's")
	f("‛example‛s", "example's")
}

func TestEnglishStemmer_replaceYAfterVowel(t *testing.T) {
	s := NewEnglishStemmer()

	f := func(input, expected string) {
		actual := s.replaceYAfterVowel(input)
		require.Equal(t, expected, actual)
	}

	// Test cases where 'y' is after a vowel
	f("playing", "plaYing")
	f("staying", "staYing")
	f("buying", "buYing")

	// Test cases where 'y' is not after a vowel
	f("yellow", "yellow")
	f("rhythm", "rhythm")

	// Test cases without 'y'
	f("example", "example")
	f("test", "test")

	// Edge cases
	f("", "")
	f("y", "y")
	f("a", "a")
	f("ay", "aY")
}

func TestEnglishStemmer_Stem(t *testing.T) {
	s := NewEnglishStemmer()

	f := func(word, stem string) {
		t.Helper()
		require.Equal(t, stem, s.Stem(word))
	}

	// Test cases from the Porter2 test suite
	f("'", "'")
	f("''", "''")
	f("'a", "'a")
	f("'s", "'s")
	f("'aa", "aa")
	f("'as", "as")
	f("'''", "'")
	f("'a'", "a")
	f("'s'", "s")
	f("'aa'", "aa")
	f("'as'", "as")
	f("a", "a")
	f("a'", "a'")
	f("a''", "a'")
	f("aa'", "aa")
	f("the", "the")
	f("at", "at")
	f("s", "s")
	f("sa", "sa")
	f("telling", "tell")
	f("told", "told")
	f("tells", "tell")
	f("teller", "teller")
	f("skies", "sky")
	f("example's", "exampl")
	f("example", "exampl")
	f("playing", "play")
	f("alacrity", "alacr")
	f("alarmed", "alarm")
	f("albania", "albania")
	f("already", "alreadi")
	f("amalgamation", "amalgam")
	f("hopping", "hop")
	f("happy", "happi")
	f("relational", "relat")
	f("excelled", "excel")
	f("excellence", "excel")
	f("excellences", "excel")
	f("excellencies", "excel")
	f("excellency", "excel")
	f("excellent", "excel")
	f("excellently", "excel")
	f("except", "except")
	f("excepted", "except")
	f("excepting", "except")
	f("exception", "except")
	f("exceptional", "except")
	f("exceptionally", "except")
	f("exceptionalness", "exception")
	f("exceptions", "except")
	f("excess", "excess")
	f("excesses", "excess")
	f("excessive", "excess")
	f("excessively", "excess")
	f("exchange", "exchang")
	f("exchanged", "exchang")
	f("exchanges", "exchang")
	f("exchanging", "exchang")
	f("exchequer", "exchequ")
	f("excitable", "excit")
	f("excitableness", "excit")
	f("excite", "excit")
	f("excited", "excit")
	f("excitedly", "excit")
	f("excitement", "excit")
	f("excitements", "excit")
	f("excites", "excit")
	f("exciting", "excit")
	f("exclaim", "exclaim")
	f("exclaimed", "exclaim")
	f("exclaiming", "exclaim")
	f("exclaims", "exclaim")
	f("exclamation", "exclam")
	f("exclamations", "exclam")
	f("exclude", "exclud")
	f("excluded", "exclud")
	f("excluding", "exclud")
	f("exclusion", "exclus")
	f("exclusions", "exclus")
	f("exclusive", "exclus")
	f("exclusively", "exclus")
	f("exclusiveness", "exclus")
	f("excoriate", "excori")
	f("excremens", "excremen")
	f("excrescence", "excresc")
	f("excruciatingly", "excruci")
	f("excursion", "excurs")
	f("excursions", "excurs")
	f("excusable", "excus")
	f("excuse", "excus")
	f("excused", "excus")
	f("excuses", "excus")
	f("excusing", "excus")
	f("execrable", "execr")
	f("execrate", "execr")
	f("execrating", "execr")
	f("execute", "execut")
	f("executed", "execut")
	f("executing", "execut")
	f("execution", "execut")
	f("executioner", "execution")
	f("executions", "execut")
	f("executive", "execut")
	f("executor", "executor")
	f("executors", "executor")
	f("exemplary", "exemplari")
	f("exemplified", "exemplifi")
	f("exemplifies", "exemplifi")
	f("exemplify", "exemplifi")
	f("feet", "feet")
	f("feign", "feign")
	f("feigned", "feign")
	f("feigning", "feign")
	f("feigns", "feign")
	f("feijao", "feijao")
	f("feint", "feint")
	f("feints", "feint")
	f("fel", "fel")
	f("feldspathic", "feldspath")
	f("felicitations", "felicit")
	f("felicitous", "felicit")
	f("felicitously", "felicit")
	f("felicity", "felic")
	f("feline", "felin")
	f("felipe", "felip")
	f("felix", "felix")
	f("fell", "fell")
	f("felled", "fell")
	f("feller", "feller")
	f("fellow", "fellow")
	f("fellows", "fellow")
	f("fellowship", "fellowship")
	f("felo", "felo")
	f("felon", "felon")
	f("feloniously", "feloni")
	f("felons", "felon")
	f("felony", "feloni")
	f("felspar", "felspar")
	f("felspathic", "felspath")
	f("felt", "felt")
	f("female", "femal")
	f("females", "femal")
	f("feminine", "feminin")
	f("fen", "fen")
	f("fence", "fenc")
	f("fenced", "fenc")
	f("fences", "fenc")
	f("fencing", "fenc")
	f("fender", "fender")
	f("fennel", "fennel")
	f("fens", "fen")
	f("ferdinand", "ferdinand")
	f("ferdy", "ferdi")
	f("ferguson", "ferguson")
	f("ferment", "ferment")
	f("fermentable", "ferment")
	f("fermenting", "ferment")
	f("fern", "fern")
	f("fernal", "fernal")
	f("fernandez", "fernandez")
	f("fernando", "fernando")
	f("fernery", "ferneri")
	f("ferns", "fern")
	f("ferocious", "feroci")
	f("ferociously", "feroci")
	f("ferocity", "feroc")
	f("ion", "ion")
	f("vodka", "vodka")
	f("vogue", "vogu")
	f("voice", "voic")
	f("voiced", "voic")
	f("voices", "voic")
	f("void", "void")
	f("voir", "voir")
	f("vol", "vol")
	f("volatile", "volatil")
	f("volatilized", "volatil")
	f("volcanic", "volcan")
	f("volcano", "volcano")
	f("volcanoes", "volcano")
	f("volcanos", "volcano")
	f("volley", "volley")
	f("volleys", "volley")
	f("volney", "volney")
	f("volte", "volt")
	f("volubility", "volubl")
	f("voluble", "volubl")
	f("volubly", "volubl")
	f("volume", "volum")
	f("volumes", "volum")
	f("voluminous", "volumin")
	f("volumnia", "volumnia")
	f("volumnias", "volumnia")
	f("voluntarily", "voluntarili")
	f("voluntary", "voluntari")
	f("volunteer", "volunt")
	f("volunteered", "volunt")
	f("volunteering", "volunt")
	f("voluptuous", "voluptu")
	f("voluta", "voluta")
	f("volutas", "voluta")
	f("volute", "volut")
	f("vom", "vom")
	f("vomit", "vomit")
	f("von", "von")
	f("voraciously", "voraci")
	f("vortex", "vortex")
	f("vorticose", "vorticos")
	f("voskresensky", "voskresenski")
	f("votaries", "votari")
	f("vote", "vote")
	f("voted", "vote")
	f("voter", "voter")
	f("voters", "voter")
	f("votes", "vote")
	f("voting", "vote")
	f("vouch", "vouch")
	f("vouches", "vouch")
	f("vouchsafe", "vouchsaf")
	f("vouchsafed", "vouchsaf")
	f("vouchsafing", "vouchsaf")
	f("vous", "vous")
	f("vow", "vow")
	f("vowed", "vow")
	f("vowing", "vow")
	f("vows", "vow")
	f("voyage", "voyag")
	f("voyager", "voyag")
	f("voyagers", "voyag")
	f("voyages", "voyag")
	f("voznesensky", "voznesenski")
	f("vrazumihin", "vrazumihin")
	f("vremya", "vremya")
	f("vrow", "vrow")
	f("vue", "vue")
	f("vulgar", "vulgar")
	f("vulgarest", "vulgarest")
	f("vulgarise", "vulgaris")
	f("vulgarity", "vulgar")
	f("vultur", "vultur")
	f("vulture", "vultur")
	f("vultures", "vultur")
	f("w", "w")
	f("wa", "wa")
	f("waa", "waa")
	f("waants", "waant")
	f("waat", "waat")
	f("wackford", "wackford")
	f("wackfords", "wackford")
	f("wadded", "wad")
	f("wadding", "wad")
	f("waddling", "waddl")
	f("wade", "wade")
	f("waded", "wade")
	f("waders", "wader")
	f("wading", "wade")
	f("wafer", "wafer")
	f("wafered", "wafer")
	f("wafers", "wafer")
	f("waft", "waft")
	f("wafted", "waft")
	f("wage", "wage")
	f("waged", "wage")
	f("wager", "wager")
	f("wagers", "wager")
	f("wages", "wage")
	f("wagged", "wag")
	f("wagging", "wag")
	f("waggish", "waggish")
	f("waggishly", "waggish")
	f("waggon", "waggon")
	f("waggoner", "waggon")
	f("waggons", "waggon")
	f("wagner", "wagner")
	f("wagon", "wagon")
}

func BenchmarkEnglishStemmer_Stem(b *testing.B) {
	stemmer := &EnglishStemmer{}

	words := []string{
		"running", "jumps", "easily", "generous", "communicate", "arsenal",
		"cats", "dogs", "happily", "flying", "crying", "studies",
	}

	for _, word := range words {
		b.Run(word, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				stemmer.Stem(word)
			}
		})
	}
}
